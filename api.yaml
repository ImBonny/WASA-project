openapi: 3.1.0
# /users                                           all the user on the site
# /users/{username}/{profile}                       this user's profile found by username
# /users/{username}/posts                          all this specific user's posts
# /users/{username}/posts/{postId}                 a specific post from a specific user
# /users/{username}/stream                           the stream of the user utilizing the app
# /users/{username}/posts/{postId}/comments              all the comments on a specific post
# /users/{username}/posts/{postId}/comments/{commentId}  a specific comment on a specific post


                    
info:
  title: WASAphoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
    
    ### Functional design specifications
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). 
    
    Users can place (and later remove) a "like" to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. 
    
    Users can ban other users. If user Alice bans user Eve, Eve won't be able to see any information about Alice. Alice can decIde to remove the ban at any moment. 
    
    Users will have their profiles. The personal profile page for the user shows: the user's photos (in reverse chronological order), how many photos have been uploaded, and the user's followers and following. 
    
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments. 
    
    A user can search other user profiles via username. 
    
    A user can log in just by specifying the username. See the "Simplified login" section for details.

    ### Simplified login
    In real-world scenarios, new developments avoId implementing registration, login, and password-lost flows as they are a security nightmare, cumbersome, error-prone, and outsIde the project scope. So, why lose money and time on implementing those? The best practice is now to delegate those tasks to a separate service (“Identity provIder”), either in-house (owned by the same company) or a third party (like “Login with Apple/Facebook/Google” buttons). 
    
    In this project, we do not have an external service like this. Instead, we decIded to provIde you with a specification for a login API so that you won't spend time dealing with the design of the endpoint. The provIded OpenAPI document is at the end of this PDF. 
    
    The login endpoint accepts a username - like “Maria” - without any password. If the username already exists, the user is logged in. If the username is new, the user is registered and logged in. The API will return the user Identifier you need to pass into the Authorization header in any other API. 
    
    This authentication method is named "Bearer Authentication" (however, in this project, you should use the user Identifier in place of the token):
      - https://swagger.io/docs/specification/authentication/bearer-authentication/
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
    
    There is no need either for HTTP sessions or session cookies.

    ## OpenAPI
    You will need to define different APIs from the requirements above. For each API, you must define the operationId key. We expect to find at least these operation Ids:
      - **doLogin (see simplified login)**
      - **setMyUserName**
      - **uploadPhoto**
      - **followUser**
      - **unfollowUser**
      - **banUser**
      - **unbanUser**
      - **getUserProfile**
      - **getMyStream**
      - **likePhoto**
      - **unlikePhoto**
      - **commentPhoto**
      - **uncommentPhoto**
      - **deletePhoto**
    
    ## CORS
    The backend must reply to CORS pre-flight requests with the appropriate setting.
    
    To avoId problems during the homework grading, you should allow all origins and you should set the "Max-Age" attribute to 1 second. See the examples code in the Fantastic Coffee decaffeinated repository.

    ## Contacts:

  contact:
    email: mattei.1910026@studenti.uniroma1.it
  version: 0.2.0
components:
  schemas:
    User:
      title: User
      description: This object describes a user
      type: object
      properties:
        username: 
          title: Username
          description: This is the user's username
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          examples: [example123]
        profile:
          title: profile
          description: This is the user's profile
          type: object
          properties:
            posts:
              title: photos
              description: This contains all of the user's posts
              type: array
              items: {$ref: '#/components/schemas/Post'}
            numberOfPhotos:
              title: number of photos
              description: this is the number of photos uploaded by a user
              type: number
              format: integer
              exampless: [1]
            followers:
              title: followers
              description: This contains all of the user's followers
              type: array
              items: {$ref: '#/components/schemas/User/properties/username'}
            followedUsers:
              title: following
              description: This contains all of the user's followed users
              type: array
              items: {$ref: '#/components/schemas/User/properties/username'}
        bannedUsers: 
          title: Banned Users
          description: this contains all of the banned users by the user
          type: array
          items: {$ref: '#/components/schemas/User/properties/username'}
    Comment:
      title: Comment
      description: This is a User's comment on a certain photo
      type: object
      properties: 
        commentOwner: {$ref: '#/components/schemas/User/properties/username'}
        commentText:
          title: comment Text
          description: This is the content of the comment
          type: string
          examples: [Good photo!]
        creationTime:
          title: creation Time
          description: this is the creation time and date
          type: string
          format: date-time
          examples: [2017-07-21T17:32:28Z]
        commentId:
          title: Comment Id
          description: This is the post's unique Id
          type: string
          examples: [Comment123]
    Post:
      title: Post
      description: This is a post generated by a user using a certain image
      type: object
      properties:
        postOwner: {$ref: '#/components/schemas/User/properties/username'}
        Image:
          title: Image
          description: This is an image posted by a User
          type: object
          properties:
            imageURL: 
              title: Image URL
              description: This is the image's unique URL that points to the file
              examples: ["https://examples.com/examples/images/image.png"]
        comments:
          description: array of the Ids of the comments on a certain post
          type: array
          items: {$ref: '#/components/schemas/Comment/properties/commentId'}
        likes:
          description: number of likes in a post
          type: number
          format: integer
          examples: [1]
        creationTime:
          title: creation Time
          description: this is the creation time and date
          type: string
          format: date-time
          examples: [2017-07-21T17:32:28Z]
        postId:
          title: Post Id
          description: This is the post's unique Id
          type: string
          examples: [Post123]
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an Identifier is returned.
        If the user exists, the user Identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  examples: [Maria]
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                Identifier:
                  type: string
                  examples: "abcdef012345"
  /users/{username}/stream:
    get:
      tags: ["myProfile"]
      operationId: getMyStream
      summary: Retrives the user's stream
      description: |-
        Retrieves the user's stream of posts from the system and 
        returns it to the user.
      parameters:
        - name: userId
          in: path
          description: The unique Id of the user
          required: true
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User/properties/username'}
      responses:
        "200":
          description: Successfully retrieved the user's stream
          content: 
            application/json:
              schema:
                type: array
                format: binary
                items: {$ref: '#/components/schemas/Post'}
        "404":
          description: User not found
  /users/{username}/profile:
    get:
      tags: ["theirProfile"]
      operationId: getUserProfile
      summary: Retrives the user's profile
      description: |-
        Retrieves the user's profile from the system and 
        returns it to the user.
      parameters:
        - name: username
          in: path
          description: The username of the user i want to see the profile
          required: true
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User/properties/username'}
      responses:
        "200":
          description: Successfully retrieved the user's profile
          content: 
            application/json:
              schema: {$ref: '#/components/schemas/User/properties/profile'}
        "404":
          description: User not found
  /users/{username}/{profile}:
    put:
      tags: ["theirProfile"]
      parameters:
        - name: action
          in: query
          description: specify the action (follow, unfollow, ban, unban)
          required: true
          schema:
            type: string
            enum: ["follow","unfollow","ban","unban"]
        - name: username
          in: path
          description: The username of the user i want to see the profile
          required: true
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User/properties/username'}
        - name: profile
          in: path
          description: The profile of the user in path
          required: true
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User/properties/profile'}
      operationId: followUnfollowBanUnbanUser
      summary: follow, unfollow, ban or unban a user
      description: "Given the username and the profile of a user, it allows you to: follow,unfollow, ban or unban a certain user"
      responses: 
        "204":
          description: Action performed successfully
        "404":
          description: Profile not found
  /users/{username}/posts/{postId}:
    put:
      tags: ["Post"]
      parameters:
        - name: action
          in: query
          description: specify the action (like, unlike)
          required: true
          schema:
            type: string
            enum: ["like","unlike"]
        - name: postId
          in: path
          description: the Id of the post being liked or unliked
          required: true
          schema: {$ref: '#/components/schemas/Post/properties/postId'}
        - name: username
          in: path
          description: the username of the user who made the post
          required: true
          schema: {$ref: '#/components/schemas/User/properties/username'}
      operationId: likeUnlikepost
      summary: like or unlike a post
      description: Given the postId and the username of the user who made the post, it allows you to like or unlike the post
      responses: 
        "204":
          description: Action performed successfully
        "404":
          description: Post not found
    delete:
      tags: ["myPost"]
      description: deletes a post
      operationId: deletePost
      summary: delete a post
      parameters:
        - name: postId
          in: path
          description: the unique ID of a post
          required: true
          schema: {$ref: '#/components/schemas/Post/properties/postId'}
        - name: userId
          in: path
          description: the unique ID of the user
          required: true
          schema: {$ref: '#/components/schemas/User/properties/username'}
      responses:
        "204": 
          description: post succesfully deleted
  /users/{username}/posts/{postId}/comments:
    post:
      tags: ["Post"]
      operationId: commentPost
      description: given a postId and the username of the user who created it, it allows you to write a comment on the post
      summary: write a comment ona  post
      parameters:
        - name: postId
          in: path
          description: the Id of the post being commented on
          required: true
          schema: {$ref: '#/components/schemas/Post/properties/postId'}
        - name: username
          in: path
          description: the username of the user who made the post
          required: true
          schema: {$ref: '#/components/schemas/User/properties/username'}
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Comment/properties/commentText'}
      responses:
        "204":
          description: Action performed successfully
        "404":
          description: Post not found
        
  /users/{username}/posts/{postId}/comments/{comment}:
    delete:
      tags: ["Post"]
      operationId: unCommentPost
      summary: delete your comment on a post
      description: allows you to remove your own comment on a post
      parameters:
        - name: commentId
          in: path
          description: the unique ID of a comment
          required: true
          schema: {$ref: '#/components/schemas/Comment/properties/commentId'}
        - name: username
          in: path
          description: the username of the user who made the post
          required: true
          schema: {$ref: '#/components/schemas/User/properties/username'}
        - name: postId
          in: path
          description: the unique ID of the post where is the comment
          required: true
          schema: {$ref: '#/components/schemas/Post/properties/postId'}
      responses:
        "204": 
          description: comment succesfully deleted
        "404":
          description: Comment not found
  /users/{username}/posts:
    post:
      operationId: uploadPhoto
      summary: create a new post
      description: allows you to create a new post
      tags: ["myPost"]
      parameters:
        - name: username
          in: path
          description: the username of the user who made the post
          required: true
          schema: {$ref: '#/components/schemas/User/properties/username'}
      requestBody:
        content:
          multipart/form-data:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                  description: 
                    type: object
                    properties:
                      content:
                        type: string
                        description: The description of the post
      responses:
        "204":
          description: Photo uploaded
        "400":
          description: Bad Request
  /users:
    put:
      description: it allows you to set the username
      tags: ["myProfile"]
      operationId: setMyUsername
      summary: set the username
      requestBody:
        description: Username to set
        content:
          application/json:
            schema: {$ref: '#/components/schemas/User/properties/username'}
        required: true
      responses:
        "204": 
          description: Successfully changed Username
        "409":
          description: Username already exists
